#pragma once

#include <initializer_list>

/**
 * SudokuPuzzle
 *
 * The SudokuPuzzle class is responsible for maintaining the state of (you guessed it) sudoku puzzles.
 * This class manages the puzzles through two private members:
 *  - int grid[9][9]
 *  - bool fixedGrid[9][9]
 *
 * The grid contains each cell in the 9x9 grid
 *
 * The fixed grid contains a bool which informs the program whether the cell should be treated as a player's
 * guess or a clue generated by an algorithm
 *
 * The main methods to note from the class are getCellValue() and setCellValue() which are used more frequently
 * in algorithms elsewhere in the project.
 */

class SudokuPuzzle
{
public:
  SudokuPuzzle();

  SudokuPuzzle(std::initializer_list<std::initializer_list<int>> grid);

  // Reset the puzzle to an empty state by filling the grid with zeroes
  void reset();

  // Resets the puzzle to only cells that are marked as fixed (in other words the given clues)
  void resetToFixedCells();

  // Returns the cell value at the given row and column
  int getCellValue(int row, int col) const;

  // Returns whether the cell is fixed at the given row and column
  bool getFixed(int row, int col) const;

  // Returns the total number of clues excluding guesses
  int getTotalClues() const;

  /* Attempts to set the cell value to a number at the given row and column
   * This attempt will fail if the cell is fixed */
  void setCellValue(int num, int row, int col);

  // Sets the cell value at the row and column even if the cell is fixed
  void strongSetValue(int num, int row, int col);

  // Sets the value of the cell and makes it fixed at the given row and column
  void setFixedCellValue(int num, int row, int col);

  // Sets whether a cell at a given row or column is fixed
  void setFixed(bool fixed, int row, int col);

  // Sets each cell if it is not empty to be fixed
  void lockOccupiedCells();

  // Fixes each cell in the puzzle
  void lockPuzzle();

  // Unfixes each cell in the puzzle
  void unlockPuzzle();

private:
  int grid[9][9];       // Contains a grid of the values of each cell in rows and columns 1-9
  bool fixedGrid[9][9]; // Contains a grid of the  fixedness of each cell in rows and columns 1-9
};
